Here is a **complete step-by-step guide** to install, configure, and run a **Laravel 8 project in XAMPP** with **MySQL database setup** on Windows:

---

## üõ†Ô∏è Step 1: Install Required Software

### ‚úÖ 1.1 Install XAMPP

* Download from: [https://www.apachefriends.org/index.html](https://www.apachefriends.org/index.html)
* Install to: `C:\xampp`

### ‚úÖ 1.2 Install Composer (PHP dependency manager)

* Download from: [https://getcomposer.org/](https://getcomposer.org/)
* After install, run `composer -V` in CMD to check it's working.

---

## üìÅ Step 2: Create Laravel 8 Project

### ‚úÖ 2.1 Open CMD or Terminal in desired folder:

```bash
cd C:\xampp\htdocs
```

### ‚úÖ 2.2 Create Laravel 8 project

```bash
composer create-project --prefer-dist laravel/laravel:^8.0 myproject
```

This creates a new Laravel 8 app in `C:\xampp\htdocs\myproject`

---

## üîß Step 3: Configure Laravel

### ‚úÖ 3.1 Set proper file/folder permissions (if on Linux/Mac; skip on Windows)

### ‚úÖ 3.2 Set environment variables

Open `.env` file inside `myproject` folder:

```env
APP_NAME=Laravel
APP_URL=http://localhost/myproject

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=myproject_db
DB_USERNAME=root
DB_PASSWORD=
```

> `DB_USERNAME` is `root` and `DB_PASSWORD` is usually empty in XAMPP.

---

## üóÑÔ∏è Step 4: Create MySQL Database

### ‚úÖ 4.1 Open phpMyAdmin

Go to: [http://localhost/phpmyadmin](http://localhost/phpmyadmin)

### ‚úÖ 4.2 Create a new database

* Name: `myproject_db`
* Collation: `utf8mb4_general_ci`

> No need to create tables manually ‚Äì Laravel migrations will handle that.

---

## üåê Step 5: Run the Laravel App

### ‚úÖ Option 1: Using Laravel's built-in server

```bash
cd C:\xampp\htdocs\myproject
php artisan serve
```

* Opens at: [http://127.0.0.1:8000](http://127.0.0.1:8000)

### ‚úÖ Option 2: Access via XAMPP (Apache)

1. Ensure your Laravel app is in:

```
C:\xampp\htdocs\myproject
```

2. Open in browser:

```
http://localhost/myproject/public/
```

> To avoid `/public`, see section below.

---

## üö´ (Optional) Avoid `/public` in URL

### Option A: Use Virtual Host

Edit: `C:\xampp\apache\conf\extra\httpd-vhosts.conf`

```apache
<VirtualHost *:80>
    ServerName myproject.local
    DocumentRoot "C:/xampp/htdocs/myproject/public"
    <Directory "C:/xampp/htdocs/myproject/public">
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>
</VirtualHost>
```

Then edit: `C:\Windows\System32\drivers\etc\hosts`
Add:

```
127.0.0.1 myproject.local
```

Restart Apache.

Access via: [http://myproject.local](http://myproject.local)

---

## üß™ Step 6: Test Database Connection

### ‚úÖ Run migrations (if any):

```bash
php artisan migrate
```

If successful:

* Your `myproject_db` database now has Laravel's default tables: `users`, `migrations`, etc.

---

## ‚úÖ Summary

| Task                     | Command / Action                                           |
| ------------------------ | ---------------------------------------------------------- |
| Create Laravel 8 project | `composer create-project laravel/laravel:^8.0 myproject`   |
| Run app                  | `php artisan serve` or `http://localhost/myproject/public` |
| Configure `.env`         | Set `APP_URL`, `DB_DATABASE`, etc.                         |
| Create database          | Via phpMyAdmin: `myproject_db`                             |
| Run DB migrations        | `php artisan migrate`                                      |

---

Would you like me to give you a ready-made **MySQL dump file** and `.env` template to speed things up?

==========================================================================================================

Here are **all possible options** to avoid `/public` in the Laravel URL (e.g., access `http://localhost/myproject/` instead of `http://localhost/myproject/public/`) ‚Äî along with pros, cons, and setup instructions:

---

## ‚úÖ Option 1: Use a Virtual Host (Recommended)

Access Laravel via `http://myproject.local/`

### üîß Steps:

1. **Edit Apache Virtual Hosts**
   File: `C:\xampp\apache\conf\extra\httpd-vhosts.conf`

   ```apache
   <VirtualHost *:80>
       ServerName myproject.local
       DocumentRoot "C:/xampp/htdocs/myproject/public"
       <Directory "C:/xampp/htdocs/myproject/public">
           Options Indexes FollowSymLinks
           AllowOverride All
           Require all granted
       </Directory>
   </VirtualHost>
   ```

2. **Edit Windows hosts file**
   File: `C:\Windows\System32\drivers\etc\hosts`
   Add:

   ```
   127.0.0.1   myproject.local
   ```

3. **Restart Apache**

4. **Visit:**

   ```
   http://myproject.local/
   ```

### ‚úÖ Pros:

* Clean, professional setup
* Works well for multiple Laravel projects

### ‚ùå Cons:

* Requires editing system files and Apache config

---

## ‚úÖ Option 2: Move `public` contents to project root (Quick Hack)

### üîß Steps:

1. Move all **contents** of `myproject/public` into the `myproject` root folder.
2. Edit `index.php`:

   ```php
   // Original:
   require __DIR__.'/../vendor/autoload.php';
   $app = require_once __DIR__.'/../bootstrap/app.php';

   // Updated:
   require __DIR__.'/vendor/autoload.php';
   $app = require_once __DIR__.'/bootstrap/app.php';
   ```

### ‚úÖ Pros:

* Fastest and no config needed

### ‚ùå Cons:

* **Not secure** (exposes internal files like `.env`)
* Not recommended for production

---

## ‚úÖ Option 3: Use `.htaccess` Rewrite (Only works for Apache)

If you insist on accessing via `http://localhost/myproject`, you can **rewrite internally**.

### üîß Steps:

1. Leave project in `htdocs/myproject`

2. Create a new `.htaccess` in `myproject/` (root folder, not public):

   ```apache
   RewriteEngine On
   RewriteCond %{REQUEST_URI} !^/public/
   RewriteRule ^(.*)$ public/$1 [L]
   ```

3. Make sure `mod_rewrite` is enabled.

4. Visit:

   ```
   http://localhost/myproject/
   ```

### ‚úÖ Pros:

* Quick fix
* No need to move files or create virtual host

### ‚ùå Cons:

* Can break if Laravel asset paths are not set properly

---

## ‚úÖ Option 4: Symlink `public` to project root (Linux/macOS only)

For non-Windows environments:

```bash
ln -s /path/to/myproject/public /path/to/myproject/public_html
```

Then configure web server root to point to `public_html`.

> Not applicable to XAMPP on Windows.

---

## ‚úÖ Summary Table

| Method                          | Clean URL | Secure | Recommended for          |
| ------------------------------- | --------- | ------ | ------------------------ |
| Virtual Host (vhost)            | ‚úÖ         | ‚úÖ      | Local dev & production   |
| Move public content to root     | ‚úÖ         | ‚ùå      | Quick local testing only |
| .htaccess rewrite to /public    | ‚úÖ         | ‚ö†Ô∏è     | Basic Apache users       |
| Symlink (Linux/macOS only)      | ‚úÖ         | ‚úÖ      | Linux hosting            |
| Use Valet or Laragon (next-gen) | ‚úÖ         | ‚úÖ      | Professional local dev   |

---

Would you like me to automate any of these (e.g., generate the `.htaccess` or vhost file)?

// ========== Artisan commands ==========
// Create controller
php artisan make:controller MyController
php artisan make:model Product